#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp F11     &kp F7  &kp F5  &kp F3    &kp F1    &kp F9               &kp F10    &kp F2     &kp F4      &kp F6     &kp F8  &kp F12
&none       &kp N7  &kp N5  &kp N3    &kp N1    &kp N9               &kp N0     &kp N2     &kp N4      &kp N6     &kp N8  &mo 3
&kp C_PREV  &kp X   &kp C   &kp L     &kp F     &kp V                &kp AT     &kp SQT    &kp U       &kp P      &kp Q   &kp C_MUTE
&kp C_PLAY  &kp R   &kp S   &kp N     &kp T     &kp G                &kp MINUS  &kp A      &kp E       &kp H      &kp I   &kp C_VOL_DN
&kp C_NEXT  &kp Z   &kp W   &kp M     &kp D     &kp B                &mkp LCLK  &kp O      &kp Y       &kp K      &kp J   &kp C_VOLUME_UP
                    &kp UP  &kp DOWN                                                       &kp LEFT    &kp RIGHT
                                      &kp LGUI  &kp ESC  &mo 2       &mo 2      &kp TAB    &kp RGUI
                                      &mo 1     &kp RET  &kp LALT    &kp LCTRL  &kp SPACE  &kp LSHIFT
            >;
        };

        symbols {
            bindings = <
&trans  &trans     &trans            &trans                &trans        &trans                      &trans        &trans      &trans                 &trans             &trans      &trans
&trans  &trans     &trans            &trans                &trans        &trans                      &trans        &trans      &trans                 &trans             &trans      &trans
&trans  &kp HASH   &kp LEFT_BRACE    &none                 &kp BSLH      &kp LG(LS(LBKT))            &kp AMPS      &kp EXCL    &kp SEMI               &kp RIGHT_BRACE    &kp GRAVE   &trans
&trans  &kp EQUAL  &kp PERCENT       &kp LEFT_PARENTHESIS  &kp PIPE      &kp LS(LG(RBKT))            &kp PLUS      &kp PERIOD  &kp RIGHT_PARENTHESIS  &kp COLON          &kp SLASH   &trans
&trans  &kp CARET  &kp LEFT_BRACKET  &kp LESS_THAN         &kp ASTERISK  &kp TILDE                   &kp QUESTION  &kp COMMA   &kp GREATER_THAN       &kp RIGHT_BRACKET  &kp DOLLAR  &trans
                   &kp PAGE_UP       &kp PAGE_DOWN                                                                             &kp HOME               &kp END
                                                           &trans        &trans            &trans    &none         &none       &kp DEL
                                                           &trans        &trans            &trans    &none         &trans      &kp BSPC
            >;
        };

        apps {
            bindings = <
&trans  &trans                   &trans                   &trans                   &trans                   &trans                             &trans     &trans                  &trans                  &trans                  &trans                  &trans
&none   &none                    &none                    &none                    &none                    &none                              &trans     &none                   &none                   &trans                  &trans                  &trans
&none   &kp LS(LA(LC(LG(F6))))   &kp LS(LC(LA(LG(F5))))   &kp LS(LA(LC(LG(F4))))   &kp LS(LA(LC(LG(F3))))   &kp LS(LA(LC(LG(F2))))             &none      &none                   &kp LS(LA(LC(LG(N9))))  &kp LS(LA(LC(LG(N0))))  &none                   &none
&none   &kp LS(LA(LC(LG(F17))))  &kp LS(LA(LC(LG(F16))))  &kp LS(LA(LC(LG(F14))))  &kp LS(LA(LC(LG(F13))))  &kp LS(LA(LC(LG(F12))))            &trans     &kp LS(LA(LC(LG(N5))))  &kp LS(LA(LC(LG(N6))))  &kp LS(LA(LC(LG(N7))))  &kp LS(LA(LC(LG(N8))))  &none
&none   &kp LS(LA(LC(LG(F11))))  &kp LS(LA(LC(LG(F10))))  &kp LS(LA(LC(LG(F9))))   &kp LS(LA(LC(LG(F8))))   &kp LS(LA(LC(LG(F7))))             &mkp RCLK  &kp LS(LA(LC(LG(N1))))  &kp LS(LA(LC(LG(N2))))  &kp LS(LA(LC(LG(N3))))  &kp LS(LA(LC(LG(N4))))  &none
                                 &trans                   &trans                                                                                                                  &trans                  &trans
                                                                                   &kp LA(F7)               &trans                   &trans    &trans     &trans                  &trans
                                                                                   &kp LA(LS(LC(LG(F1))))   &trans                   &trans    &trans     &trans                  &trans
            >;
        };

        keyboard_control {
            bindings = <
&trans        &trans        &trans        &trans        &trans           &trans                &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans           &trans                &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans           &trans                &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0     &bt BT_CLR            &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans           &trans                &trans  &trans  &trans  &trans  &trans  &trans
                            &trans        &trans                                                               &trans  &trans
                                                        &trans           &trans      &trans    &to 4   &trans  &trans
                                                        &rgb_ug RGB_TOG  &trans      &trans    &trans  &trans  &trans
            >;
        };

        game {
            bindings = <
&kp F5  &kp ESC         &kp F1  &kp F2  &kp F3        &kp F4               &kp F6  &kp F7  &kp F8     &kp F9      &kp F10    &kp F11
&kp N5  &kp TAB         &kp N1  &kp N2  &kp N3        &kp N4               &kp N6  &kp N7  &kp N8     &kp N9      &kp N0     &kp MINUS
&kp T   &kp CAPSLOCK    &kp Q   &kp W   &kp E         &kp R                &kp Y   &kp U   &kp I      &kp O       &kp P      &kp LEFT_BRACKET
&kp G   &kp LEFT_SHIFT  &kp A   &kp S   &kp D         &kp F                &kp H   &kp J   &kp K      &kp L       &kp SEMI   &kp SQT
&kp B   &kp LCTRL       &kp Z   &kp X   &kp C         &kp V                &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp SLASH  &kp RIGHT_SHIFT
                        &trans  &trans                                                     &trans     &trans
                                        &trans        &trans     &trans    &to 0   &trans  &trans
                                        &kp LEFT_ALT  &kp SPACE  &trans    &trans  &trans  &trans
            >;
        };
    };
};

//right hand trackball configuration

&trackball_peripheral_listener {
    input-processors = <&zip_xy_scaler 3 2>;

    // this gets it to the default installation orientation,,,,,
    // <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>;
    // activate layer 3 within 500ms of the trackball moving
    // <&zip_temp_layer 3 500>;
};

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // this gets it to the default installation orientation,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        // <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_xy_scaler 1 100>,
        // make this trackball output scrolling events by default instead of cursor movement,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
